!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){t.exports=n(1)},function(t,e,n){"use strict";n.r(e);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var r=new WeakMap,o=function(t){return"function"==typeof t&&r.has(t)},i=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,a=function(t,e){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;e!==n;){var r=e.nextSibling;t.removeChild(e),e=r}},u={},s={};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var l="{{lit-".concat(String(Math.random()).slice(2),"}}"),c="\x3c!--".concat(l,"--\x3e"),f=new RegExp("".concat(l,"|").concat(c)),p=function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.parts=[],this.element=n;for(var r=[],o=[],i=document.createTreeWalker(n.content,133,null,!1),a=0,u=-1,s=0,c=e.strings,p=e.values.length;s<p;){var h=i.nextNode();if(null!==h){if(u++,1===h.nodeType){if(h.hasAttributes()){for(var m=h.attributes,b=m.length,g=0,w=0;w<b;w++)d(m[w].name,"$lit$")&&g++;for(;g-- >0;){var _=c[s],x=y.exec(_)[2],k=x.toLowerCase()+"$lit$",O=h.getAttribute(k);h.removeAttribute(k);var S=O.split(f);this.parts.push({type:"attribute",index:u,name:x,strings:S}),s+=S.length-1}}"TEMPLATE"===h.tagName&&(o.push(h),i.currentNode=h.content)}else if(3===h.nodeType){var E=h.data;if(E.indexOf(l)>=0){for(var j=h.parentNode,P=E.split(f),N=P.length-1,T=0;T<N;T++){var L=void 0,C=P[T];if(""===C)L=v();else{var V=y.exec(C);null!==V&&d(V[2],"$lit$")&&(C=C.slice(0,V.index)+V[1]+V[2].slice(0,-"$lit$".length)+V[3]),L=document.createTextNode(C)}j.insertBefore(L,h),this.parts.push({type:"node",index:++u})}""===P[N]?(j.insertBefore(v(),h),r.push(h)):h.data=P[N],s+=N}}else if(8===h.nodeType)if(h.data===l){var A=h.parentNode;null!==h.previousSibling&&u!==a||(u++,A.insertBefore(v(),h)),a=u,this.parts.push({type:"node",index:u}),null===h.nextSibling?h.data="":(r.push(h),u--),s++}else for(var M=-1;-1!==(M=h.data.indexOf(l,M+1));)this.parts.push({type:"node",index:-1}),s++}else i.currentNode=o.pop()}for(var R=0,H=r;R<H.length;R++){var q=H[R];q.parentNode.removeChild(q)}},d=function(t,e){var n=t.length-e.length;return n>=0&&t.slice(n)===e},h=function(t){return-1!==t.index},v=function(){return document.createComment("")},y=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=\/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;function m(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function b(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var g=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.__parts=[],this.template=e,this.processor=n,this.options=r}var e,n,r;return e=t,(n=[{key:"update",value:function(t){var e=0,n=!0,r=!1,o=void 0;try{for(var i,a=this.__parts[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var u=i.value;void 0!==u&&u.setValue(t[e]),e++}}catch(t){r=!0,o=t}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}var s=!0,l=!1,c=void 0;try{for(var f,p=this.__parts[Symbol.iterator]();!(s=(f=p.next()).done);s=!0){var d=f.value;void 0!==d&&d.commit()}}catch(t){l=!0,c=t}finally{try{s||null==p.return||p.return()}finally{if(l)throw c}}}},{key:"_clone",value:function(){for(var t,e=i?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),n=[],r=this.template.parts,o=document.createTreeWalker(e,133,null,!1),a=0,u=0,s=o.nextNode();a<r.length;)if(t=r[a],h(t)){for(;u<t.index;)u++,"TEMPLATE"===s.nodeName&&(n.push(s),o.currentNode=s.content),null===(s=o.nextNode())&&(o.currentNode=n.pop(),s=o.nextNode());if("node"===t.type){var l=this.processor.handleTextExpression(this.options);l.insertAfterNode(s.previousSibling),this.__parts.push(l)}else{var c;(c=this.__parts).push.apply(c,m(this.processor.handleAttributeExpressions(s,t.name,t.strings,this.options)))}a++}else this.__parts.push(void 0),a++;return i&&(document.adoptNode(e),customElements.upgrade(e)),e}}])&&b(e.prototype,n),r&&b(e,r),t}();function w(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function x(t,e,n){return e&&_(t.prototype,e),n&&_(t,n),t}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */var k=function(){function t(e,n,r,o){w(this,t),this.strings=e,this.values=n,this.type=r,this.processor=o}return x(t,[{key:"getHTML",value:function(){for(var t=this.strings.length-1,e="",n=!1,r=0;r<t;r++){var o=this.strings[r],i=o.lastIndexOf("\x3c!--");n=(i>-1||n)&&-1===o.indexOf("--\x3e",i+1);var a=y.exec(o);e+=null===a?o+(n?l:c):o.substr(0,a.index)+a[1]+a[2]+"$lit$"+a[3]+l}return e+=this.strings[t]}},{key:"getTemplateElement",value:function(){var t=document.createElement("template");return t.innerHTML=this.getHTML(),t}}]),t}();function O(t,e){return!e||"object"!==C(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function S(t,e,n){return(S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=E(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function E(t){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function j(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&P(t,e)}function P(t,e){return(P=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function N(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function T(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function L(t,e,n){return e&&T(t.prototype,e),n&&T(t,n),t}function C(t){return(C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */var V=function(t){return null===t||!("object"===C(t)||"function"==typeof t)},A=function(t){return Array.isArray(t)||!(!t||!t[Symbol.iterator])},M=function(){function t(e,n,r){N(this,t),this.dirty=!0,this.element=e,this.name=n,this.strings=r,this.parts=[];for(var o=0;o<r.length-1;o++)this.parts[o]=this._createPart()}return L(t,[{key:"_createPart",value:function(){return new R(this)}},{key:"_getValue",value:function(){for(var t=this.strings,e=t.length-1,n="",r=0;r<e;r++){n+=t[r];var o=this.parts[r];if(void 0!==o){var i=o.value;if(V(i)||!A(i))n+="string"==typeof i?i:String(i);else{var a=!0,u=!1,s=void 0;try{for(var l,c=i[Symbol.iterator]();!(a=(l=c.next()).done);a=!0){var f=l.value;n+="string"==typeof f?f:String(f)}}catch(t){u=!0,s=t}finally{try{a||null==c.return||c.return()}finally{if(u)throw s}}}}}return n+=t[e]}},{key:"commit",value:function(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}]),t}(),R=function(){function t(e){N(this,t),this.value=void 0,this.committer=e}return L(t,[{key:"setValue",value:function(t){t===u||V(t)&&t===this.value||(this.value=t,o(t)||(this.committer.dirty=!0))}},{key:"commit",value:function(){for(;o(this.value);){var t=this.value;this.value=u,t(this)}this.value!==u&&this.committer.commit()}}]),t}(),H=function(){function t(e){N(this,t),this.value=void 0,this.__pendingValue=void 0,this.options=e}return L(t,[{key:"appendInto",value:function(t){this.startNode=t.appendChild(v()),this.endNode=t.appendChild(v())}},{key:"insertAfterNode",value:function(t){this.startNode=t,this.endNode=t.nextSibling}},{key:"appendIntoPart",value:function(t){t.__insert(this.startNode=v()),t.__insert(this.endNode=v())}},{key:"insertAfterPart",value:function(t){t.__insert(this.startNode=v()),this.endNode=t.endNode,t.endNode=this.startNode}},{key:"setValue",value:function(t){this.__pendingValue=t}},{key:"commit",value:function(){for(;o(this.__pendingValue);){var t=this.__pendingValue;this.__pendingValue=u,t(this)}var e=this.__pendingValue;e!==u&&(V(e)?e!==this.value&&this.__commitText(e):e instanceof k?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):A(e)?this.__commitIterable(e):e===s?(this.value=s,this.clear()):this.__commitText(e))}},{key:"__insert",value:function(t){this.endNode.parentNode.insertBefore(t,this.endNode)}},{key:"__commitNode",value:function(t){this.value!==t&&(this.clear(),this.__insert(t),this.value=t)}},{key:"__commitText",value:function(t){var e=this.startNode.nextSibling;t=null==t?"":t,e===this.endNode.previousSibling&&3===e.nodeType?e.data=t:this.__commitNode(document.createTextNode("string"==typeof t?t:String(t))),this.value=t}},{key:"__commitTemplateResult",value:function(t){var e=this.options.templateFactory(t);if(this.value instanceof g&&this.value.template===e)this.value.update(t.values);else{var n=new g(e,t.processor,this.options),r=n._clone();n.update(t.values),this.__commitNode(r),this.value=n}}},{key:"__commitIterable",value:function(e){Array.isArray(this.value)||(this.value=[],this.clear());var n,r=this.value,o=0,i=!0,a=!1,u=void 0;try{for(var s,l=e[Symbol.iterator]();!(i=(s=l.next()).done);i=!0){var c=s.value;void 0===(n=r[o])&&(n=new t(this.options),r.push(n),0===o?n.appendIntoPart(this):n.insertAfterPart(r[o-1])),n.setValue(c),n.commit(),o++}}catch(t){a=!0,u=t}finally{try{i||null==l.return||l.return()}finally{if(a)throw u}}o<r.length&&(r.length=o,this.clear(n&&n.endNode))}},{key:"clear",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.startNode;a(this.startNode.parentNode,t.nextSibling,this.endNode)}}]),t}(),q=function(){function t(e,n,r){if(N(this,t),this.value=void 0,this.__pendingValue=void 0,2!==r.length||""!==r[0]||""!==r[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=n,this.strings=r}return L(t,[{key:"setValue",value:function(t){this.__pendingValue=t}},{key:"commit",value:function(){for(;o(this.__pendingValue);){var t=this.__pendingValue;this.__pendingValue=u,t(this)}if(this.__pendingValue!==u){var e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=u}}}]),t}(),I=function(t){function e(t,n,r){var o;return N(this,e),(o=O(this,E(e).call(this,t,n,r))).single=2===r.length&&""===r[0]&&""===r[1],o}return j(e,M),L(e,[{key:"_createPart",value:function(){return new z(this)}},{key:"_getValue",value:function(){return this.single?this.parts[0].value:S(E(e.prototype),"_getValue",this).call(this)}},{key:"commit",value:function(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}]),e}(),z=function(t){function e(){return N(this,e),O(this,E(e).apply(this,arguments))}return j(e,R),e}(),D=!1;try{var $={get capture(){return D=!0,!1}};window.addEventListener("test",$,$),window.removeEventListener("test",$,$)}catch(t){}var W=function(){function t(e,n,r){var o=this;N(this,t),this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=n,this.eventContext=r,this.__boundHandleEvent=function(t){return o.handleEvent(t)}}return L(t,[{key:"setValue",value:function(t){this.__pendingValue=t}},{key:"commit",value:function(){for(;o(this.__pendingValue);){var t=this.__pendingValue;this.__pendingValue=u,t(this)}if(this.__pendingValue!==u){var e=this.__pendingValue,n=this.value,r=null==e||null!=n&&(e.capture!==n.capture||e.once!==n.once||e.passive!==n.passive),i=null!=e&&(null==n||r);r&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),i&&(this.__options=B(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=u}}},{key:"handleEvent",value:function(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}]),t}(),B=function(t){return t&&(D?{capture:t.capture,passive:t.passive,once:t.once}:t.capture)};function F(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var X=new(function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,(n=[{key:"handleAttributeExpressions",value:function(t,e,n,r){var o=e[0];return"."===o?new I(t,e.slice(1),n).parts:"@"===o?[new W(t,e.slice(1),r.eventContext)]:"?"===o?[new q(t,e.slice(1),n)]:new M(t,e,n).parts}},{key:"handleTextExpression",value:function(t){return new H(t)}}])&&F(e.prototype,n),r&&F(e,r),t}());
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
function U(t){var e=G.get(t.type);void 0===e&&(e={stringsArray:new WeakMap,keyString:new Map},G.set(t.type,e));var n=e.stringsArray.get(t.strings);if(void 0!==n)return n;var r=t.strings.join(l);return void 0===(n=e.keyString.get(r))&&(n=new p(t,t.getTemplateElement()),e.keyString.set(r,n)),e.stringsArray.set(t.strings,n),n}var G=new Map,J=new WeakMap;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.0.0");var K=function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return new k(t,n,"html",X)};function Q(t){return(Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Y(t,e,n,r,o,i,a){try{var u=t[i](a),s=u.value}catch(t){return void n(t)}u.done?e(s):Promise.resolve(s).then(r,o)}function Z(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function tt(t,e){return!e||"object"!==Q(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function et(t){return(et=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function nt(t,e){return(nt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var rt=function(t){return function(e){function n(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),tt(this,et(n).apply(this,arguments))}var r,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&nt(t,e)}(n,t),r=n,(o=[{key:"render",value:function(){}},{key:"invalidate",value:function(){var t,e=(t=regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(this.needsRender){t.next=7;break}if(e){t.next=6;break}return this.needsRender=!0,t.next=5,0;case 5:this.needsRender=!1;case 6:n=this.render(),r=this.shadowRoot,o=void 0,i=void 0,void 0===(i=J.get(r))&&(a(r,r.firstChild),J.set(r,i=new H(Object.assign({templateFactory:U},o))),i.appendInto(r)),i.setValue(n),i.commit();case 7:case"end":return t.stop()}var n,r,o,i},t,this)}),function(){var e=this,n=arguments;return new Promise(function(r,o){var i=t.apply(e,n);function a(t){Y(i,r,o,a,u,"next",t)}function u(t){Y(i,r,o,a,u,"throw",t)}a(void 0)})});return function(t){return e.apply(this,arguments)}}()}])&&Z(r.prototype,o),i&&Z(r,i),n}()},ot=function(){return(ot=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var it=function(t,e){void 0===t&&(t={}),void 0===e&&(e=null);var n=t||{},r=[];function o(){r.forEach(function(t){return t(n)})}return{middleware:e,setState:function(t){n=ot({},n,"function"==typeof t?t(n):t),o()},subscribe:function(t){return r.push(t),function(){r.splice(r.indexOf(t),1)}},getState:function(){return n},reset:function(){n=t,o()}}},at=it({info:[],todoList:[],login:!1});function ut(t){return function(){var e=at.getState();e=t.apply(void 0,[e].concat(Array.prototype.slice.call(arguments))),at.setState(e)}}ut(function(t){return void 0===t.info.count?t.info.count=0:t.info.count++,t}),ut(function(t){return firebase.firestore().collection("TEST").get().then(function(t){t.forEach(function(t){console.info(t.id,t.data())})}),t});var st=ut(function(t,e,n){var r=new XMLHttpRequest;if(!r)throw new Error("XHR 호출 불가");return r.open("POST","https://us-central1-taeuk-project.cloudfunctions.net/isAdmin"),r.setRequestHeader("Content-type","application/x-www-form-urlencoded"),r.addEventListener("readystatechange",function(){r.readyState===r.DONE&&(200!==r.status&&201!==r.status||(firebase.auth().signInAnonymously().catch(function(t){var e=t.code,n=t.message;console.error(e,n)}),function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0]&&Dt.renderPage("app-main","/")}(JSON.parse(r.responseText).result),t.login=!0,at.setState(t)))}),r.send("id=".concat(e,"&password=").concat(n)),t});var lt=ut(function(t,e){return Dt.renderPage("".concat(e,"-main"),e),t});ut(function(t){return firebase.auth().onAuthStateChanged(function(e){if(e){var n=e.isAnonymous,r=e.uid;console.info(n,r),t.login=!0,at.setState(t)}else t.login=!1,at.setState(t)}),t}),ut(function(t,e){return document.querySelector("app-main").shadowRoot.querySelector("main").innerHTML=e,t}),ut(function(t,e){return new Promise(function(t,n){var r=new XMLHttpRequest;r.open("GET",e),r.send(),r.onreadystatechange=function(){r.readyState===XMLHttpRequest.DONE&&(200===r.status?t(r.response):n(r.statusText))}})}),ut(function(t,e){return t.todoList.push({title:e,completed:!1,id:"item-xxxxxxxxxxxx".replace(/[x]/g,function(){return(16*Math.random()|0).toString(16)})}),t}),ut(function(t,e){return t.todoList=t.todoList.filter(function(t){return t.id!==e}),t}),ut(function(t,e){var n=t.todoList.find(function(t){return t.id===e});return n.completed=!n.completed,t}),ut(function(t,e,n){return t.todoList.find(function(t){return t.id===e}).title=n,t}),ut(function(t,e){return t.todoList.forEach(function(t){t.completed=e}),t}),ut(function(t){return t.todoList=t.todoList.filter(function(t){return!t.completed}),t});function ct(){var t=dt(['\n<style>\n.hero-full-screen {\n  width: 100vw;\n  height: 100vh;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-direction: column;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-align-items: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-justify-content: space-between;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n  background: url("https://images.pexels.com/photos/378273/pexels-photo-378273.jpeg?w=1260&h=750&auto=compress&cs=tinysrgb") center center no-repeat;\n  background-size: cover;\n}\n\n.hero-full-screen .middle-content-section {\n  text-align: center;\n  color: #fefefe;\n}\n\n.hero-full-screen .top-content-section {\n  width: 100%;\n}\n\n.hero-full-screen .bottom-content-section {\n  padding: 1rem;\n}\n\n.hero-full-screen .bottom-content-section svg {\n  height: 3.75rem;\n  width: 3.75rem;\n  fill: #fefefe;\n}\n\n.hero-full-screen .top-bar {\n  background: transparent;\n}\n\n.hero-full-screen .top-bar .menu {\n  background: transparent;\n}\n\n.hero-full-screen .top-bar .menu-text {\n  color: #fefefe;\n}\n\n.hero-full-screen .top-bar .menu li {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n\n.hero-full-screen .top-bar .menu a {\n  color: #fefefe;\n  font-weight: bold;\n}\n</style>\n']);return ct=function(){return t},t}function ft(t){return(ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function pt(){var t=dt([' \n    <link rel="stylesheet" type="text/css" href="/src/css/foundation.min.css">\n\t\t','\n\t\t<div class="page-main">\n\t\t\t<div class="hero-full-screen">\n\t\t\t\t<div class="top-content-section">\n\t\t\t\t\t<div class="top-bar">\n\t\t\t\t\t\t<div class="top-bar-left">\n\t\t\t\t\t\t\t<ul class="menu">\n\t\t\t\t\t\t\t\t<li class="menu-text"><img src="http://placehold.it/75x30" alt="logo"></li>\n\t\t\t\t\t\t\t\t<li><a href="#">Menu</a></li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="middle-content-section">\n\t\t\t\t\t<h1>Main Page</h1>\n\t\t\t\t\t<button class="button large logout">Logout</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="bottom-content-section" data-magellan data-threshold="0">\n\t\t\t\t\t<a href="#main-content-section"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M24 12c0-6.627-5.373-12-12-12s-12 5.373-12 12 5.373 12 12 12 12-5.373 12-12zm-18.005-1.568l1.415-1.414 4.59 4.574 4.579-4.574 1.416 1.414-5.995 5.988-6.005-5.988z"/></svg></a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id="main-content-section" data-magellan-target="main-content-section"></div>\n\t\t</div>\n        ']);return pt=function(){return t},t}function dt(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function ht(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function vt(t,e){return!e||"object"!==ft(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function yt(t){return(yt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function mt(t,e){return(mt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var bt=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=vt(this,yt(e).call(this)))._handlers={},t.attachShadow({mode:"open"}),t.invalidate(),t}var n,r,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&mt(t,e)}(e,rt(HTMLElement)),n=e,(r=[{key:"connectedCallback",value:function(){var t=this.shadowRoot,e=this._handlers;e.onClick=this._onClick.bind(this),t.addEventListener("click",e.onClick)}},{key:"disconnectedCallback",value:function(){this.shadowRoot.removeEventListener("click",this._handlers.onClick)}},{key:"_onClick",value:function(t){t.target.classList.contains("logout")&&lt("login")}},{key:"render",value:function(){return K(pt(),gt)}}])&&ht(n.prototype,r),o&&ht(n,o),e}(),gt=K(ct());function wt(t){return(wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _t(){var t=kt(["\n<style>\n.sign-in-form {\n  padding: 1rem 1.5em;\n  border-radius: .5rem;\n  background-color: #3d454f;\n  max-width: 320px;\n}\n\n.sign-in-form h4 {\n  color: white;\n  margin-bottom: 1rem;\n  font-weight: 600;\n  text-transform: uppercase;\n}\n\n.sign-in-form label {\n  text-transform: uppercase;\n  color: #adadad;\n  letter-spacing: 1px;\n  font-weight: 600;\n  margin-bottom: 1rem;\n}\n\n.sign-in-form input {\n  color: #666;\n}\n\n.sign-in-form input:focus {\n  opacity: 0.9;\n}\n\n.sign-in-form-username,\n.sign-in-form-password {\n  border-radius: 30px;\n  border: none;\n  -webkit-transition: all ease .4s;\n  transition: all ease .4s;\n}\n\n.sign-in-form-button {\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  border-radius: 30px;\n  border: 1px solid #fff;\n  color: #fff;\n  background-color: transparent;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  width: 100%;\n  padding: 1rem;\n  -webkit-transition: all ease .4s;\n  transition: all ease .4s;\n}\n\n.sign-in-form-button:hover {\n  background-color: #44c8ed;\n  border-color: #44c8ed;\n}\n</style>\n"]);return _t=function(){return t},t}function xt(){var t=kt(['\n    <link rel="stylesheet" type="text/css" href="/src/css/foundation.min.css">\n    ','\n    <div class="sign-in-form">\n        <h4 class="text-center">Sign In</h4>\n        <label for="sign-in-form-username">Username</label>\n        <input type="text" class="sign-in-form-username" id="sign-in-form-username" placeholder="ID"/>\n        <label for="sign-in-form-password">Password</label>\n        <input type="password" class="sign-in-form-password" id="sign-in-form-password" placeholder="PW"/>\n        <button type="submit" class="sign-in-form-button">Sign In</button>\n    </div>\n    ']);return xt=function(){return t},t}function kt(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function Ot(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function St(t,e){return!e||"object"!==wt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Et(t){return(Et=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function jt(t,e){return(jt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}customElements.define("app-main",bt);var Pt=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=St(this,Et(e).call(this)))._handlers={},t.attachShadow({mode:"open"}),t.invalidate(!0),t}var n,r,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&jt(t,e)}(e,rt(HTMLElement)),n=e,(r=[{key:"connectedCallback",value:function(){var t=this.shadowRoot,e=this._handlers;e.onClick=this._onClick.bind(this),t.querySelector(".sign-in-form-button").addEventListener("click",e.onClick)}},{key:"disconnectedCallback",value:function(){this.shadowRoot.querySelector(".sign-in-form-button").removeEventListener("click",this._handlers.onClick)}},{key:"_onClick",value:function(){var t=this.shadowRoot.querySelector(".sign-in-form-username").value,e=this.shadowRoot.querySelector(".sign-in-form-password").value;st(t,e)}},{key:"render",value:function(){return K(xt(),Nt)}}])&&Ot(n.prototype,r),o&&Ot(n,o),e}(),Nt=K(_t());function Tt(){var t=Vt(["\n<style>\n#pageLogin {\n\tdisplay: -webkit-box;\n\tdisplay: -ms-flexbox;\n\tdisplay: flex;\n\t-webkit-box-pack: center;\n\t-ms-flex-pack: center;\n\tjustify-content: center;\n\t-webkit-box-align: center;\n\t-ms-flex-align: center;\n\talign-items: center;\n\twidth: 95vw;\n\theight: 98vh;\n\tmargin: auto;\n}\n</style>\n"]);return Tt=function(){return t},t}function Lt(t){return(Lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ct(){var t=Vt([" \n\t\t",'\n\t\t<div id="pageLogin">\n\t\t\t<login-form />\n        </div>\n        ']);return Ct=function(){return t},t}function Vt(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function At(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Mt(t,e){return!e||"object"!==Lt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Rt(t){return(Rt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ht(t,e){return(Ht=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}customElements.define("login-form",Pt);var qt=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=Mt(this,Rt(e).call(this))).attachShadow({mode:"open"}),t.invalidate(),t}var n,r,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ht(t,e)}(e,rt(HTMLElement)),n=e,(r=[{key:"render",value:function(){return K(Ct(),It)}}])&&At(n.prototype,r),o&&At(n,o),e}(),It=K(Tt());function zt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}customElements.define("login-main",qt),n.d(e,"default",function(){return Dt});var Dt=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,r=[{key:"init",value:function(){this.loadingDOM(),this.router().isRoute().otherwise().pushUrl()}},{key:"_onPopstate",value:function(){var t=this;window.addEventListener("popstate",function(e){console.info("[popstate]",e.state),t.router(e.state.path)})}},{key:"_onClickAnchor",value:function(){var t=this;document.addEventListener("click",function(e){if(e.target&&"A"===e.target.nodeName){e.preventDefault();var n=e.target.getAttribute("href");history.pushState({path:n},null,n),t.router(n)}})}},{key:"router",value:function(){var e=location.pathname,n=!0;return"/"===e&&(e="/app"),{isRoute:function(){return n&&(t.renderPage("".concat(e.split("/")[1],"-main"),e),n=!1),this},otherwise:function(){return n&&(t._onLoad(function(){return history.replaceState({},null,"login")}),t.renderPage("login-main",e),n=!1),this},pushUrl:function(){n&&t._onLoad(function(){return history.pushState({},null,e)})}}}},{key:"_onLoad",value:function(t){window.addEventListener("load",function(){t()})}},{key:"loadingDOM",value:function(){var t=document.querySelector("main"),e=document.createElement("div");this.emptyDOM(),e.classList.add("loading");for(var n=0;n<5;n++)e.appendChild(document.createElement("span"));t.appendChild(e)}},{key:"renderPage",value:function(t,e){this.emptyDOM();var n=document.createElement(t);document.querySelector("main").appendChild(n),history.pushState({},t,e)}},{key:"emptyDOM",value:function(){document.querySelector("main").innerHTML=""}},{key:"exceptDOM",value:function(){document.querySelector("main").innerHTML="No Route"}}],(n=null)&&zt(e.prototype,n),r&&zt(e,r),t}();Dt.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,